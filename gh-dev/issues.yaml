openapi: 3.0.3
info:
  version: 1.1.4
  title: GitHub v3 REST API
  description: GitHub's v3 REST API.
  license:
    name: MIT
    url: https://spdx.org/licenses/MIT
  termsOfService: https://docs.github.com/articles/github-terms-of-service
  contact:
    name: Support
    url: https://support.github.com/contact?tags=dotcom-rest-api
  x-github-plan: ghes
  x-github-release: 3.9
servers:
- url: https://api.github.com
  variables:
    hostname:
      description: Self-hosted Enterprise Server hostname
      default: HOSTNAME
    protocol:
      description: Self-hosted Enterprise Server protocol
      default: http
externalDocs:
  description: GitHub Enterprise Developer Docs
  url: https://docs.github.com/enterprise-server@3.9/rest/
paths:
  "/repos/{owner}/{repo}/issues/{issue_number}":
    get:
      summary: Get an issue
      description: |-
        The API returns a [`301 Moved Permanently` status](https://docs.github.com/enterprise-server@3.9/rest/guides/best-practices-for-using-the-rest-api#follow-redirects) if the issue was
        [transferred](https://docs.github.com/enterprise-server@3.9/articles/transferring-an-issue-to-another-repository/) to another repository. If
        the issue was transferred to or deleted from a repository where the authenticated user lacks read access, the API
        returns a `404 Not Found` status. If the issue was deleted from a repository where the authenticated user has read
        access, the API returns a `410 Gone` status. To receive webhook events for transferred and deleted issues, subscribe
        to the [`issues`](https://docs.github.com/enterprise-server@3.9/webhooks/event-payloads/#issues) webhook.

        **Note**: GitHub's REST API considers every pull request an issue, but not every issue is a pull request. For this
        reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
        the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
        request id, use the "[List pull requests](https://docs.github.com/enterprise-server@3.9/rest/pulls/pulls#list-pull-requests)" endpoint.

        This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/enterprise-server@3.9/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."

        - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
        - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
        - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
        - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
      tags:
      - issues
      operationId: issues/get
      externalDocs:
        description: API method documentation
        url: https://docs.github.com/enterprise-server@3.9/rest/issues/issues#get-an-issue
      parameters:
      - "$ref": "#/components/parameters/owner"
      - "$ref": "#/components/parameters/repo"
      - "$ref": "#/components/parameters/issue-number"
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/issue"
        '301':
          "$ref": "#/components/responses/moved_permanently"
        '404':
          "$ref": "#/components/responses/not_found"
        '410':
          "$ref": "#/components/responses/gone"
        '304':
          "$ref": "#/components/responses/not_modified"
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: issues
        subcategory: issues
    patch:
      summary: Update an issue
      description: |-
        Issue owners and users with push access can edit an issue.

        This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/enterprise-server@3.9/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."

        - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
        - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
        - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
        - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
      tags:
      - issues
      operationId: issues/update
      externalDocs:
        description: API method documentation
        url: https://docs.github.com/enterprise-server@3.9/rest/issues/issues#update-an-issue
      parameters:
      - "$ref": "#/components/parameters/owner"
      - "$ref": "#/components/parameters/repo"
      - "$ref": "#/components/parameters/issue-number"
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: The title of the issue.
                  nullable: true
                body:
                  type: string
                  description: The contents of the issue.
                  nullable: true
                assignee:
                  type: string
                  nullable: true
                  description: Username to assign to this issue. **This field is deprecated.**
                state:
                  type: string
                  description: The open or closed state of the issue.
                  enum:
                  - open
                  - closed
                state_reason:
                  type: string
                  enum:
                  - completed
                  - not_planned
                  - reopened
                  nullable: true
                  description: The reason for the state change. Ignored unless `state`
                    is changed.
                  example: not_planned
                milestone:
                    type: integer
                    # oneOf:
                    #   - type: integer
                    #   - type: string
                    description: The `number` of the milestone to associate this issue
                      with or use `null` to remove the current milestone. Only users
                      with push access can set the milestone for issues. Without push
                      access to the repository, milestone changes are silently dropped.
                    nullable: true
                labels:
                  type: array
                  description: Labels to associate with this issue. Pass one or more
                    labels to _replace_ the set of labels on this issue. Send an empty
                    array (`[]`) to clear all labels from the issue. Only users with
                    push access can set labels for issues. Without push access to
                    the repository, label changes are silently dropped.
                  items:
                    # oneOf:
                    # - type: string
                    type: object
                    properties:
                      id:
                        type: integer
                      name:
                        type: string
                      description:
                        type: string
                        nullable: true
                      color:
                        type: string
                        nullable: true
                assignees:
                  type: array
                  description: Usernames to assign to this issue. Pass one or more
                    user logins to _replace_ the set of assignees on this issue. Send
                    an empty array (`[]`) to clear all assignees from the issue. Only
                    users with push access can set assignees for new issues. Without
                    push access to the repository, assignee changes are silently dropped.
                  items:
                    type: string
            examples:
              default:
                value:
                  title: Found a bug
                  body: I'm having a problem with this.
                  assignees:
                  - octocat
                  milestone: 1
                  state: open
                  labels:
                  - bug
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/issue"
        '422':
          "$ref": "#/components/responses/validation_failed"
        '503':
          "$ref": "#/components/responses/service_unavailable"
        '403':
          "$ref": "#/components/responses/forbidden"
        '301':
          "$ref": "#/components/responses/moved_permanently"
        '404':
          "$ref": "#/components/responses/not_found"
        '410':
          "$ref": "#/components/responses/gone"
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: issues
        subcategory: issues
  "/repos/{owner}/{repo}/issues":
    get:
      summary: List repository issues
      description: |-
        List issues in a repository. Only open issues will be listed.

        **Note**: GitHub's REST API considers every pull request an issue, but not every issue is a pull request. For this
        reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
        the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
        request id, use the "[List pull requests](https://docs.github.com/enterprise-server@3.9/rest/pulls/pulls#list-pull-requests)" endpoint.

        This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/enterprise-server@3.9/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."

        - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
        - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
        - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
        - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
      tags:
      - issues
      operationId: issues/list-for-repo
      externalDocs:
        description: API method documentation
        url: https://docs.github.com/enterprise-server@3.9/rest/issues/issues#list-repository-issues
      parameters:
      - "$ref": "#/components/parameters/owner"
      - "$ref": "#/components/parameters/repo"
      - name: milestone
        description: If an `integer` is passed, it should refer to a milestone by
          its `number` field. If the string `*` is passed, issues with any milestone
          are accepted. If the string `none` is passed, issues without milestones
          are returned.
        in: query
        required: false
        schema:
          type: string
      - name: state
        description: Indicates the state of the issues to return.
        in: query
        required: false
        schema:
          type: string
          enum:
          - open
          - closed
          - all
          default: open
      - name: assignee
        description: Can be the name of a user. Pass in `none` for issues with no
          assigned user, and `*` for issues assigned to any user.
        in: query
        required: false
        schema:
          type: string
      - name: creator
        description: The user that created the issue.
        in: query
        required: false
        schema:
          type: string
      - name: mentioned
        description: A user that's mentioned in the issue.
        in: query
        required: false
        schema:
          type: string
      - "$ref": "#/components/parameters/labels"
      - name: sort
        description: What to sort results by.
        in: query
        required: false
        schema:
          type: string
          enum:
          - created
          - updated
          - comments
          default: created
      - "$ref": "#/components/parameters/direction"
      - "$ref": "#/components/parameters/since"
      - "$ref": "#/components/parameters/per-page"
      - "$ref": "#/components/parameters/page"
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/issue"
          headers:
            Link:
              "$ref": "#/components/headers/link"
        '301':
          "$ref": "#/components/responses/moved_permanently"
        '422':
          "$ref": "#/components/responses/validation_failed"
        '404':
          "$ref": "#/components/responses/not_found"
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: issues
        subcategory: issues
    post:
      summary: Create an issue
      description: |-
        Any user with pull access to a repository can create an issue. If [issues are disabled in the repository](https://docs.github.com/enterprise-server@3.9/articles/disabling-issues/), the API returns a `410 Gone` status.

        This endpoint triggers [notifications](https://docs.github.com/enterprise-server@3.9/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/enterprise-server@3.9/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)"
        and "[Best practices for using the REST API](https://docs.github.com/enterprise-server@3.9/rest/guides/best-practices-for-using-the-rest-api)."

        This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/enterprise-server@3.9/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."

        - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
        - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
        - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
        - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
      tags:
      - issues
      operationId: issues/create
      externalDocs:
        description: API method documentation
        url: https://docs.github.com/enterprise-server@3.9/rest/issues/issues#create-an-issue
      parameters:
      - "$ref": "#/components/parameters/owner"
      - "$ref": "#/components/parameters/repo"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  additionalProperties: true
                  type: object
                  # oneOf:
                  # - type: string
                  # - type: integer
                  description: The title of the issue.
                body:
                  type: string
                  description: The contents of the issue.
                assignee:
                  type: string
                  description: 'Login for the user that this issue should be assigned
                    to. _NOTE: Only users with push access can set the assignee for
                    new issues. The assignee is silently dropped otherwise. **This
                    field is deprecated.**_'
                  nullable: true
                milestone:
                  type: integer
                  # oneOf:
                  # - type: string
                  # - type: integer
                  description: 'The `number` of the milestone to associate this
                    issue with. _NOTE: Only users with push access can set the milestone
                    for new issues. The milestone is silently dropped otherwise._'
                  nullable: true
                labels:
                  type: array
                  description: 'Labels to associate with this issue. _NOTE: Only users
                    with push access can set labels for new issues. Labels are silently
                    dropped otherwise._'
                  items:
                    # oneOf:
                    # - type: string
                    type: object
                    properties:
                      id:
                        type: integer
                      name:
                        type: string
                      description:
                        type: string
                        nullable: true
                      color:
                        type: string
                        nullable: true
                assignees:
                  type: array
                  description: 'Logins for Users to assign to this issue. _NOTE: Only
                    users with push access can set assignees for new issues. Assignees
                    are silently dropped otherwise._'
                  items:
                    type: string
              required:
              - title
            examples:
              default:
                value:
                  title: Found a bug
                  body: I'm having a problem with this.
                  assignees:
                  - octocat
                  milestone: 1
                  labels:
                  - bug
      responses:
        '201':
          description: Response
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/issue"
          headers:
            Location:
              example: https://api.github.com/repos/octocat/Hello-World/issues/1347
              schema:
                type: string
        '400':
          "$ref": "#/components/responses/bad_request"
        '403':
          "$ref": "#/components/responses/forbidden"
        '422':
          "$ref": "#/components/responses/validation_failed"
        '503':
          "$ref": "#/components/responses/service_unavailable"
        '404':
          "$ref": "#/components/responses/not_found"
        '410':
          "$ref": "#/components/responses/gone"
      x-github:
        triggersNotification: true
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: issues
        subcategory: issues
components:
  parameters:
    issue-number:
      name: issue_number
      description: The number that identifies the issue.
      in: path
      required: true
      schema:
        type: integer
    owner:
      name: owner
      description: The account owner of the repository. The name is not case sensitive.
      in: path
      required: true
      schema:
        type: string
    repo:
      name: repo
      description: The name of the repository without the `.git` extension. The name
        is not case sensitive.
      in: path
      required: true
      schema:
        type: string
    labels:
      name: labels
      description: 'A list of comma separated label names. Example: `bug,ui,@high`'
      in: query
      required: false
      schema:
        type: string
    direction:
      name: direction
      description: The direction to sort the results by.
      in: query
      required: false
      schema:
        type: string
        enum:
        - asc
        - desc
        default: desc
    per-page:
      name: per_page
      description: The number of results per page (max 100). For more information,
        see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.9/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
      in: query
      schema:
        type: integer
        default: 30
    since:
      name: since
      description: 'Only show results that were last updated after the given time.
        This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
        format: `YYYY-MM-DDTHH:MM:SSZ`.'
      in: query
      required: false
      schema:
        type: string
        format: date-time
    page:
      name: page
      description: The page number of the results to fetch. For more information,
        see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.9/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
      in: query
      schema:
        type: integer
        default: 1
  schemas:
    issue:
      title: Issue
      description: Issues are a great way to keep track of tasks, enhancements, and
        bugs for your projects.
      type: object
      properties:
        id:
          type: integer
          format: int64
        node_id:
          type: string
        url:
          description: URL for the issue
          example: https://api.github.com/repositories/42/issues/1
          type: string
          format: uri
        repository_url:
          type: string
          format: uri
        labels_url:
          type: string
        comments_url:
          type: string
          format: uri
        events_url:
          type: string
          format: uri
        html_url:
          type: string
          format: uri
        number:
          description: Number uniquely identifying the issue within its repository
          example: 42
          type: integer
        state:
          description: State of the issue; either 'open' or 'closed'
          example: open
          type: string
        state_reason:
          description: The reason for the current state
          example: not_planned
          type: string
          nullable: true
          enum:
          - completed
          - reopened
          - not_planned
        title:
          description: Title of the issue
          example: Widget creation fails in Safari on OS X 10.8
          type: string
        body:
          description: Contents of the issue
          example: It looks like the new widget form is broken on Safari. When I try
            and create the widget, Safari crashes. This is reproducible on 10.8, but
            not 10.9. Maybe a browser bug?
          type: string
          nullable: true
        user:
          "$ref": "#/components/schemas/nullable-simple-user"
        labels:
          description: Labels to associate with this issue; pass one or more label
            names to replace the set of labels on this issue; send an empty array
            to clear all labels from the issue; note that the labels are silently
            dropped for users without push access to the repository
          example:
          - bug
          - registration
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                format: int64
              node_id:
                type: string
              url:
                type: string
                format: uri
              name:
                type: string
              description:
                type: string
                nullable: true
              color:
                type: string
                nullable: true
              default:
                type: boolean
    basic-error:
      title: Basic Error
      description: Basic Error
      type: object
      properties:
        message:
          type: string
        documentation_url:
          type: string
        url:
          type: string
        status:
          type: string
    validation-error-simple:
      title: Validation Error Simple
      description: Validation Error Simple
      type: object
      required:
      - message
      - documentation_url
      properties:
        message:
          type: string
        documentation_url:
          type: string
        errors:
          type: array
          items:
            type: string
    scim-error:
      title: Scim Error
      description: Scim Error
      type: object
      properties:
        message:
          type: string
          nullable: true
        documentation_url:
          type: string
          nullable: true
        detail:
          type: string
          nullable: true
        status:
          type: integer
        scimType:
          type: string
          nullable: true
        schemas:
          type: array
          items:
            type: string
    validation-error:
      title: Validation Error
      description: Validation Error
      type: object
      required:
      - message
      - documentation_url
      properties:
        message:
          type: string
        documentation_url:
          type: string
        errors:
          type: array
          items:
            type: object
            required:
            - code
            properties:
              resource:
                type: string
              field:
                type: string
              message:
                type: string
              code:
                type: string
              index:
                type: integer
              value:
                additionalProperties: true
                # oneOf:
                # - type: string
                #   nullable: true
                # - type: integer
                #   nullable: true
                # - type: array
                #   nullable: true
                #   items:
                #     type: string
    nullable-simple-user:
      title: Simple User
      description: A GitHub user.
      type: object
      properties:
        name:
          nullable: true
          type: string
        email:
          nullable: true
          type: string
        login:
          type: string
          example: octocat
        id:
          type: integer
          format: int64
          example: 1
        node_id:
          type: string
          example: MDQ6VXNlcjE=
        avatar_url:
          type: string
          format: uri
          example: https://github.com/images/error/octocat_happy.gif
        gravatar_id:
          type: string
          example: 41d064eb2195891e12d0413f63227ea7
          nullable: true
        url:
          type: string
          format: uri
          example: https://api.github.com/users/octocat
        html_url:
          type: string
          format: uri
          example: https://github.com/octocat
        followers_url:
          type: string
          format: uri
          example: https://api.github.com/users/octocat/followers
        following_url:
          type: string
          example: https://api.github.com/users/octocat/following{/other_user}
        gists_url:
          type: string
          example: https://api.github.com/users/octocat/gists{/gist_id}
        starred_url:
          type: string
          example: https://api.github.com/users/octocat/starred{/owner}{/repo}
        subscriptions_url:
          type: string
          format: uri
          example: https://api.github.com/users/octocat/subscriptions
        organizations_url:
          type: string
          format: uri
          example: https://api.github.com/users/octocat/orgs
        repos_url:
          type: string
          format: uri
          example: https://api.github.com/users/octocat/repos
        events_url:
          type: string
          example: https://api.github.com/users/octocat/events{/privacy}
        received_events_url:
          type: string
          format: uri
          example: https://api.github.com/users/octocat/received_events
        type:
          type: string
          example: User
        site_admin:
          type: boolean
        starred_at:
          type: string
          example: '"2020-07-09T00:17:55Z"'
      required:
      - avatar_url
      - events_url
      - followers_url
      - following_url
      - gists_url
      - gravatar_id
      - html_url
      - id
      - node_id
      - login
      - organizations_url
      - received_events_url
      - repos_url
      - site_admin
      - starred_url
      - subscriptions_url
      - type
      - url
      nullable: true
  responses:
    not_found:
      description: Resource not found
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/basic-error"
    validation_failed_simple:
      description: Validation failed, or the endpoint has been spammed.
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/validation-error-simple"
    bad_request:
      description: Bad Request
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/basic-error"
        application/scim+json:
          schema:
            "$ref": "#/components/schemas/scim-error"
    validation_failed:
      description: Validation failed, or the endpoint has been spammed.
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/validation-error"
    accepted:
      description: Accepted
      content:
        application/json:
          schema:
            type: object
          examples:
            default:
              value: 
    not_modified:
      description: Not modified
    requires_authentication:
      description: Requires authentication
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/basic-error"
    forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/basic-error"
    service_unavailable:
      description: Service unavailable
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: string
              message:
                type: string
              documentation_url:
                type: string
    gone:
      description: Gone
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/basic-error"
    moved_permanently:
      description: Moved permanently
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/basic-error"
  headers:
    link:
      example: <https://api.github.com/resource?page=2>; rel="next", <https://api.github.com/resource?page=5>;
        rel="last"
      schema:
        type: string
  securitySchemes:
    oauth:
      type: http
      scheme: bearer
      description: |
        OAuth access token. For more information, see "[Creating a personal access token](https://docs.github.com/enterprise-server@3.9/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token)."
    
  